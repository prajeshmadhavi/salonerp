# Project Overview

This project is a Next.js 14 application built with Shadcn UI and Supabase. It leverages the latest features of Next.js, including the App Router, to create a modern, scalable, and maintainable web application.

## Key Technologies

- **Next.js 14**: A React framework for building server-rendered and statically generated web applications. The App Router is used for routing and navigation.
- **Shadcn UI**: A collection of reusable components built using Radix UI and Tailwind CSS. It provides a modern and customizable UI for the application.
- **Supabase**: An open-source Firebase alternative that provides a suite of tools for building applications, including a PostgreSQL database, authentication, real-time subscriptions, and storage.
- **React Query**: Used for server state management and data fetching
- **MSW**: Mock Service Worker for API mocking in tests
- **Jest**: Testing framework with React Testing Library for component tests

## Authentication

The application uses Supabase for authentication, allowing users to sign up and log in using their email and password. Supabase handles user data and provides real-time updates. The application utilizes Supabase's real-time capabilities by using the WebSocket method, such as `supabase.from`, using the library `@supabase/supabase-js` to query and subscribe to data changes.

## Development Rules

1. The logged-in user's UID from Supabase must be stored in a session variable accessible throughout the project
2. Every new table created in Supabase must include:
   - `id` field as autoincrement primary key
   - `UID` UUID NOT NULL REFERENCES auth.users(id)
   - `created_at` timestamp with default value
   - `updated_at` timestamp with default value
3. API routes must follow the pattern:
   - Place route handlers in `src/app/api/[route]/route.ts`
   - Use TypeScript types for request/response validation
   - Implement proper error handling with status codes
4. Components organization:
   - UI components go in `src/components/ui`
   - Business logic components go in `src/components`
   - Follow Shadcn UI patterns for component composition
5. Testing guidelines:
   - Unit tests go in `__tests__` directories adjacent to components
   - Use MSW for API mocking in tests
   - Follow React Testing Library best practices
6. State management:
   - Use React Query for server state
   - Use Context API for global client state
7. Theme management:
   - Use ThemeProvider from `src/providers/ThemeProvider.tsx`
   - Follow Tailwind CSS theming patterns
8. Supabase schema management:
   - Add new migrations in `supabase/migrations`
   - Verify schema changes using `lib/verify-schema.ts`
   - Test database operations using `lib/test-connection.ts`

## Development

The project follows a modular structure, with components, hooks, and utilities organized into separate directories. It uses TypeScript for type safety and improved developer experience.

To run the application, use the command `pnpm run dev`.

To run tests, use `pnpm test`.

To verify database schema, use `pnpm run verify-schema`.
